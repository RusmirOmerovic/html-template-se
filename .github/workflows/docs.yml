name: Generate Docs (README + Wiki)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      include-template:
        description: 'Include template directories'
        required: false
        default: 'false'
      force_refresh:
        description: 'Erzwinge neue Generierung (README + Wiki) auch ohne Diff'
        required: false
        default: 'false'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: false

jobs:
  docs:
    name: Build docs with OpenAI, push Wiki, open PR
    runs-on: ubuntu-latest

    steps:
      - name: Check required secret
        id: secretcheck
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "OPENAI_API_KEY is missing – skipping docs generation."
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop early if secret is missing
        if: steps.secretcheck.outputs.missing == 'true'
        run: echo "::notice title=Docs skipped::No OPENAI_API_KEY secret configured."

      - name: Checkout repo (clean)
        if: steps.secretcheck.outputs.missing == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Setup Node
        if: steps.secretcheck.outputs.missing == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        if: steps.secretcheck.outputs.missing == 'false'
        run: sudo apt-get install -y jq

      - name: Install dependencies
        if: steps.secretcheck.outputs.missing == 'false'
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Collect repository context
        if: steps.secretcheck.outputs.missing == 'false'
        run: |
          set -euo pipefail
          FLAG=${{ github.event.inputs.include-template == 'true' && '--all' || '--user-only' }}
          node scripts/generate-docs.mjs $FLAG wiki
          echo "Context size:" && wc -c repo_context.txt || true

      - name: Generate README with OpenAI (scripted)
        if: steps.secretcheck.outputs.missing == 'false'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          bash scripts/ai-readme.sh "${{ github.event.inputs.force_refresh || 'false' }}"

      - name: Build Wiki from code comments
        if: steps.secretcheck.outputs.missing == 'false'
        run: node scripts/generate-docs.mjs --wiki

      - name: Format README and Wiki
        if: steps.secretcheck.outputs.missing == 'false'
        run: npm run fmt README.md docs/wiki || true

            - name: Push Wiki (robust fetch/rebase + retry)
        if: steps.secretcheck.outputs.missing == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # 0) Abbruch, wenn kein Inhalt
          if [ ! -d docs/wiki ] || [ -z "$(ls -A docs/wiki)" ]; then
            echo "No wiki content to push."; exit 0
          fi

          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          WIKI_URL="https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.wiki.git"
          echo "Wiki remote will be: $WIKI_URL"

          # 1) Frisch klonen
          rm -rf wiki-repo
          git clone "$WIKI_URL" wiki-repo

          # 2) Default-Branch ermitteln (master/main)
          DEFAULT_BRANCH="$(git -C wiki-repo remote show origin | awk '/HEAD branch/ {print $NF}')"
          [ -z "${DEFAULT_BRANCH:-}" ] && DEFAULT_BRANCH=master
          echo "Wiki default branch: $DEFAULT_BRANCH"

          # 3) Branch sauber auschecken
          if git -C wiki-repo show-ref --verify --quiet "refs/remotes/origin/${DEFAULT_BRANCH}"; then
            git -C wiki-repo checkout -B "${DEFAULT_BRANCH}" "origin/${DEFAULT_BRANCH}"
          else
            git -C wiki-repo checkout --orphan "${DEFAULT_BRANCH}"
            rm -rf wiki-repo/*
            git -C wiki-repo commit --allow-empty -m "init wiki"
          fi

          # 4) Dateien synchronisieren
          rsync -a --delete docs/wiki/ wiki-repo/

          git -C wiki-repo add -A
          if git -C wiki-repo diff --cached --quiet; then
            echo "No wiki changes to commit."; exit 0
          fi
          git -C wiki-repo commit -m "docs: update Wiki from workflow"

          # 5) Robust push: fetch + rebase + retry + force-with-lease
          attempt_push () {
            echo "Fetching latest from remote..."
            git -C wiki-repo fetch --prune "$WIKI_URL" "${DEFAULT_BRANCH}" || true
            if git -C wiki-repo rev-parse --verify FETCH_HEAD >/dev/null 2>&1; then
              echo "Rebasing onto FETCH_HEAD..."
              git -C wiki-repo rebase FETCH_HEAD || (echo "Rebase failed, attempting 'rebase --abort' and continuing with merge..." && git -C wiki-repo rebase --abort && git -C wiki-repo merge --no-edit FETCH_HEAD || true)
            fi
            echo "Pushing to $WIKI_URL (${DEFAULT_BRANCH})..."
            git -C wiki-repo push "$WIKI_URL" HEAD:"${DEFAULT_BRANCH}" || \
            git -C wiki-repo push --force-with-lease "$WIKI_URL" HEAD:"${DEFAULT_BRANCH}"
          }

          # bis zu 3 Versuche (Race-Conditions)
          for i in 1 2 3; do
            if attempt_push; then
              echo "✅ Wiki pushed."
              exit 0
            fi
            echo "Push attempt $i failed, retrying in 2s..."
            sleep 2
          done

          echo "❌ Wiki push failed after retries." >&2
          exit 1

      - name: Prepare docs branch (for PR with README + docs/wiki)
        if: steps.secretcheck.outputs.missing == 'false'
        id: prep
        run: |
          set -euo pipefail
          BR="docs/generated-${{ github.run_id }}"
          git add README.md docs/wiki || true
          if git diff --cached --quiet; then
            echo "No doc changes detected – skipping PR."
            echo "skip_pr=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip_pr=false" >> "$GITHUB_OUTPUT"
            echo "branch=$BR" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        id: cpr
        if: steps.prep.outputs.skip_pr == 'false' && steps.secretcheck.outputs.missing == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: ${{ steps.prep.outputs.branch }}
          commit-message: 'docs: auto-generate README + Wiki'
          title: 'Automatisch generierte Doku (README + Wiki)'
          body: 'Dieser PR wurde automatisch erstellt – bitte prüfen und mergen.'
          labels: 'automation, docs'
          signoff: false
          add-paths: |
            README.md
            docs/wiki/**
