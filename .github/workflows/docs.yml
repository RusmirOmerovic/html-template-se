name: Generate Docs (README + Wiki)

on:
  workflow_dispatch:
    inputs:
      include-template:
        description: 'Include template directories'
        required: false
        default: 'false'
  push:
    branches: ['main']

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: false

jobs:
  docs:
    name: Build docs with OpenAI, push Wiki, open PR
    runs-on: ubuntu-latest

    steps:
      - name: Check required secrets
        id: secretcheck
        run: |
          miss_openai=$([ -z "${{ secrets.OPENAI_API_KEY }}" ] && echo true || echo false)
          miss_pat=$([ -z "${{ secrets.GH_PAT_WORKFLOW }}" ] && echo true || echo false)
          echo "miss_openai=$miss_openai" >> "$GITHUB_OUTPUT"
          echo "miss_pat=$miss_pat" >> "$GITHUB_OUTPUT"

      - name: Stop early if secrets missing
        if: steps.secretcheck.outputs.miss_openai == 'true' || steps.secretcheck.outputs.miss_pat == 'true'
        run: |
          echo "::notice title=Docs skipped::Missing secrets. Need OPENAI_API_KEY and GH_PAT_WORKFLOW."

      - name: Checkout repo
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install jq
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        run: sudo apt-get install -y jq

      - name: Install dependencies
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Collect repository context
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        run: |
          set -euo pipefail
          FLAG=${{ github.event.inputs.include-template == 'true' && '--all' || '--user-only' }}
          node scripts/generate-docs.mjs $FLAG
          echo "Context size:" && wc -c repo_context.txt || true

      - name: Generate README with OpenAI (scripted)
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: bash scripts/ai-readme.sh

      - name: Build Wiki from code comments
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        run: npm run docs:wiki

      - name: Format README and Wiki
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        run: npm run fmt README.md docs/wiki

      # ---------- Push ins Wiki (.wiki.git) mit PAT ----------
      - name: Push Wiki
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        env:
          PAT: ${{ secrets.GH_PAT_WORKFLOW }}
        run: |
          set -euo pipefail
          if [ ! -d docs/wiki ] || [ -z "$(ls -A docs/wiki)" ]; then
            echo "No wiki content to push."; exit 0
          fi

          WIKI_URL="https://x-access-token:${PAT}@github.com/${GITHUB_REPOSITORY}.wiki.git"

          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          rm -rf wiki-repo
          git clone "$WIKI_URL" wiki-repo

          DEFAULT_BRANCH="$(git -C wiki-repo remote show origin | awk '/HEAD branch/ {print $NF}')"
          if [ -z "${DEFAULT_BRANCH:-}" ]; then
            if git -C wiki-repo show-ref --verify --quiet refs/remotes/origin/master; then DEFAULT_BRANCH="master"; else DEFAULT_BRANCH="main"; fi
          fi
          echo "Wiki default branch: ${DEFAULT_BRANCH}"

          if git -C wiki-repo show-ref --verify --quiet "refs/remotes/origin/${DEFAULT_BRANCH}"; then
            git -C wiki-repo checkout -B "${DEFAULT_BRANCH}" "origin/${DEFAULT_BRANCH}"
          else
            git -C wiki-repo checkout --orphan "${DEFAULT_BRANCH}"
            rm -rf wiki-repo/*
            git -C wiki-repo commit --allow-empty -m "init wiki"
          fi

          rsync -a --delete docs/wiki/ wiki-repo/

          # ðŸ”§ Cleanup: Reste aus alten LÃ¤ufen entfernen (README*-Seiten o.Ã¤.)
          git -C wiki-repo ls-files | grep -Ei '^README(|-.*)?\.md$' | xargs -r -I{} git -C wiki-repo rm -f "{}" || true
          # Optional: weitere Altlasten-Regeln:
          # git -C wiki-repo ls-files | grep -Ei '^home\(1\)?.md$' | xargs -r -I{} git -C wiki-repo rm -f "{}" || true

          echo "Pushing to ${DEFAULT_BRANCH}..."
             if ! git -C wiki-repo push origin HEAD:${DEFAULT_BRANCH}; then
            echo "Push rejected. Fetching and rebasing..."
            git -C wiki-repo fetch origin ${DEFAULT_BRANCH} || true
            git -C wiki-repo pull --rebase origin ${DEFAULT_BRANCH} || true
            git -C wiki-repo push origin HEAD:${DEFAULT_BRANCH} || \
            git -C wiki-repo push --force-with-lease origin HEAD:${DEFAULT_BRANCH}
          fi
          echo "âœ… Wiki pushed."

          echo "Pushing wiki HEAD -> ${DEFAULT_BRANCH}"
          if ! git -C wiki-repo push "$WIKI_URL" HEAD:refs/heads/${DEFAULT_BRANCH}; then
            echo "Non-fast-forward, rebasingâ€¦"
            git -C wiki-repo fetch "$WIKI_URL" ${DEFAULT_BRANCH} || true
            git -C wiki-repo pull --rebase "$WIKI_URL" ${DEFAULT_BRANCH} || true
            git -C wiki-repo push "$WIKI_URL" HEAD:refs/heads/${DEFAULT_BRANCH} || \
              git -C wiki-repo push --force-with-lease "$WIKI_URL" HEAD:refs/heads/${DEFAULT_BRANCH}
          fi
          echo "âœ… Wiki pushed."

      # ---------- PR im Haupt-Repo (PAT nutzen) ----------
      - name: Prepare docs branch (no checkout/switch)
        if: steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        id: prep
        run: |
          set -euo pipefail
          BR="docs/generated-${{ github.run_id }}"
          git add README.md docs/wiki || true
          if git diff --cached --quiet; then
            echo "skip_pr=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip_pr=false" >> "$GITHUB_OUTPUT"
            echo "branch=$BR" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        id: cpr
        if: steps.prep.outputs.skip_pr == 'false' && steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT_WORKFLOW }}
          base: main
          branch: ${{ steps.prep.outputs.branch }}
          commit-message: 'docs: auto-generate README + Wiki'
          title: 'Automatisch generierte Doku (README + Wiki)'
          body: 'Dieser PR wurde automatisch erstellt â€“ bitte prÃ¼fen und mergen.'
          labels: 'automation, docs'
          signoff: false
          add-paths: |
            README.md
            docs/wiki/**

      - name: Enable auto-merge (squash)
        if: steps.prep.outputs.skip_pr == 'false' && steps.secretcheck.outputs.miss_openai == 'false' && steps.secretcheck.outputs.miss_pat == 'false'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GH_PAT_WORKFLOW }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash
